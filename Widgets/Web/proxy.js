// This JavaScript was automatically generated by
// Jayrock.JsonRpc.Web.JsonRpcProxyGenerator, Jayrock, Version=0.9.8316.0, Culture=neutral, PublicKeyToken=null
// on Saturday, October 06, 2007 at 2:12:09 PM (W. Europe Daylight Time)

function JsonServices(url)
{
    var self = this;
    var m = ["getFrontPageStories","getUpcomingPageStories","getPopularStories","getPopularStoriesPagedFromTimePeriod","getUpcomingStories","getUpcomingStoriesPagedFromTimePeriod","getUserKickedStories","getUserSubmittedStories","getUserFriendsKickedStories","getUserFriendsSubmittedStories","getTaggedStories","system.listMethods","system.version","system.about"];
    var idems = [true,true,true,true,true,true,true,true,true,true,true,true,true,true];
    
    // Returns a list of recently published stories to the homepage
    
    this[m[0]] = function /* getFrontPageStories */ (pageNumber, pageSize, callback)
    {
        if (self.kwargs) return rpc(new Call(0, { pageNumber: pageNumber, pageSize: pageSize }, callback));
        return rpc(new Call(0, [ pageNumber, pageSize ], callback));
    }
    
    // Returns a paged list of recently submitted stories to the site
    
    this[m[1]] = function /* getUpcomingPageStories */ (pageNumber, pageSize, callback)
    {
        if (self.kwargs) return rpc(new Call(1, { pageNumber: pageNumber, pageSize: pageSize }, callback));
        return rpc(new Call(1, [ pageNumber, pageSize ], callback));
    }
    
    // Returns a paged list of the most popular published stories from the last 30 days
    
    this[m[2]] = function /* getPopularStories */ (pageNumber, pageSize, callback)
    {
        if (self.kwargs) return rpc(new Call(2, { pageNumber: pageNumber, pageSize: pageSize }, callback));
        return rpc(new Call(2, [ pageNumber, pageSize ], callback));
    }
    
    // Returns a paged list of the most popular published stories from a time period
    
    this[m[3]] = function /* getPopularStoriesPagedFromTimePeriod */ (pageNumber, pageSize, timePeriod, callback)
    {
        if (self.kwargs) return rpc(new Call(3, { pageNumber: pageNumber, pageSize: pageSize, timePeriod: timePeriod }, callback));
        return rpc(new Call(3, [ pageNumber, pageSize, timePeriod ], callback));
    }
    
    // Returns a paged list of the most popular upcoming stories from the last 30 days
    
    this[m[4]] = function /* getUpcomingStories */ (pageNumber, pageSize, callback)
    {
        if (self.kwargs) return rpc(new Call(4, { pageNumber: pageNumber, pageSize: pageSize }, callback));
        return rpc(new Call(4, [ pageNumber, pageSize ], callback));
    }
    
    // Returns a paged list of the most popular upcoming stories from a time period
    
    this[m[5]] = function /* getUpcomingStoriesPagedFromTimePeriod */ (pageNumber, pageSize, timePeriod, callback)
    {
        if (self.kwargs) return rpc(new Call(5, { pageNumber: pageNumber, pageSize: pageSize, timePeriod: timePeriod }, callback));
        return rpc(new Call(5, [ pageNumber, pageSize, timePeriod ], callback));
    }
    
    // Returns a paged list of the most recent stories kicked by a user
    
    this[m[6]] = function /* getUserKickedStories */ (username, pageNumber, pageSize, callback)
    {
        if (self.kwargs) return rpc(new Call(6, { username: username, pageNumber: pageNumber, pageSize: pageSize }, callback));
        return rpc(new Call(6, [ username, pageNumber, pageSize ], callback));
    }
    
    // Returns a paged list of the most recent stories submitted by a user
    
    this[m[7]] = function /* getUserSubmittedStories */ (username, pageNumber, pageSize, callback)
    {
        if (self.kwargs) return rpc(new Call(7, { username: username, pageNumber: pageNumber, pageSize: pageSize }, callback));
        return rpc(new Call(7, [ username, pageNumber, pageSize ], callback));
    }
    
    // Returns a paged list of the most recent stories kicked by a user's friends
    
    this[m[8]] = function /* getUserFriendsKickedStories */ (username, pageNumber, pageSize, callback)
    {
        if (self.kwargs) return rpc(new Call(8, { username: username, pageNumber: pageNumber, pageSize: pageSize }, callback));
        return rpc(new Call(8, [ username, pageNumber, pageSize ], callback));
    }
    
    // Returns a paged list of the most recent stories submitted by a user's friends
    
    this[m[9]] = function /* getUserFriendsSubmittedStories */ (username, pageNumber, pageSize, callback)
    {
        if (self.kwargs) return rpc(new Call(9, { username: username, pageNumber: pageNumber, pageSize: pageSize }, callback));
        return rpc(new Call(9, [ username, pageNumber, pageSize ], callback));
    }
    
    // Returns a paged list of the recent stories tagged with a tag
    
    this[m[10]] = function /* getTaggedStories */ (tag, pageNumber, pageSize, callback)
    {
        if (self.kwargs) return rpc(new Call(10, { tag: tag, pageNumber: pageNumber, pageSize: pageSize }, callback));
        return rpc(new Call(10, [ tag, pageNumber, pageSize ], callback));
    }
    
    // Returns an array of method names implemented by this service.
    
    this[m[11]] = function /* system.listMethods */ (callback)
    {
        if (self.kwargs) return rpc(new Call(11, { }, callback));
        return rpc(new Call(11, [ ], callback));
    }
    
    // Returns the version server implementation using the major, minor, build and revision format.
    
    this[m[12]] = function /* system.version */ (callback)
    {
        if (self.kwargs) return rpc(new Call(12, { }, callback));
        return rpc(new Call(12, [ ], callback));
    }
    
    // Returns a summary about the server implementation for display purposes.
    
    this[m[13]] = function /* system.about */ (callback)
    {
        if (self.kwargs) return rpc(new Call(13, { }, callback));
        return rpc(new Call(13, [ ], callback));
    }
    
    var url = typeof(url) === 'string' ? url : 'http://www.dotnetkicks.com/services/json/jsonservices.ashx';
    var nextId = 0;

    function Call(method, params, callback)
    {
        this.url = url;
        this.callback = callback;
        this.proxy = self;
        this.idempotent = idems[method];
        this.request = 
        { 
            id     : ++nextId, 
            method : m[method], 
            params : params 
        };
    }

    function rpc(call)
    {
        return self.channel != null && typeof(self.channel.rpc) === 'function' ?
            self.channel.rpc(call) : call;
    }

    this.kwargs = false;
    this.channel = new JayrockChannel();

    function JayrockChannel()
    {
        this.rpc = function(call)
        {
            var async = typeof(call.callback) === 'function';
            var xhr = newXHR();
            xhr.open('POST', call.url, async, this.httpUserName, this.httpPassword);
            xhr.setRequestHeader('Content-Type', this.contentType || 'application/json; charset=utf-8');
            xhr.setRequestHeader('X-JSON-RPC', call.request.method);
            if (async) xhr.onreadystatechange = function() { xhr_onreadystatechange(xhr, call.callback); }
            xhr.send(JSON.stringify(call.request));
            call.handler = xhr;
            if (async) return call;
            if (xhr.status != 200) throw new Error(xhr.status + ' ' + xhr.statusText);
            var response = JSON.eval(xhr.responseText);
            if (response.error != null) throw response.error;
            return response.result;
        }

        function xhr_onreadystatechange(sender, callback)
        {
            if (sender.readyState == /* complete */ 4)
            {
                var response = sender.status == 200 ? 
                    JSON.eval(sender.responseText) : {};
                
                callback(response, sender);
            }
        }

        function newXHR()
        {
            if (typeof(window) !== 'undefined' && window.XMLHttpRequest)
                return new XMLHttpRequest(); /* IE7, Safari 1.2, Mozilla 1.0/Firefox, and Netscape 7 */
            else
                return new ActiveXObject('Microsoft.XMLHTTP'); /* WSH and IE 5 to IE 6 */
        }
    }
}

JsonServices.rpcMethods = ["getFrontPageStories","getUpcomingPageStories","getPopularStories","getPopularStoriesPagedFromTimePeriod","getUpcomingStories","getUpcomingStoriesPagedFromTimePeriod","getUserKickedStories","getUserSubmittedStories","getUserFriendsKickedStories","getUserFriendsSubmittedStories","getTaggedStories","system.listMethods","system.version","system.about"];
