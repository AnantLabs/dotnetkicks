<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Subkismet</name>
    </assembly>
    <members>
        <member name="T:Subkismet.HttpClient">
            <summary>
            Class used to make the actual HTTP requests.
            </summary>
            <remarks>
            Yeah, I know you're thinking this is overkill, but it makes it 
            easier to write tests to have this layer of abstraction from the 
            underlying Http request.
            </remarks>
        </member>
        <member name="M:Subkismet.HttpClient.PostRequest(System.Uri,System.String,System.Int32,System.String)">
            <summary>
            Posts the request and returns a text response.  
            This is all that is needed for Akismet.
            </summary>
            <param name="url">The URL.</param>
            <param name="userAgent">The user agent.</param>
            <param name="timeout">The timeout.</param>
            <param name="formParameters">The properly formatted parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.HttpClient.PostRequest(System.Uri,System.String,System.Int32,System.String,System.Net.IWebProxy)">
            <summary>
            Posts the request.
            </summary>
            <param name="url">The URL.</param>
            <param name="userAgent">The user agent.</param>
            <param name="timeout">The timeout in milliseconds.</param>
            <param name="formParameters">The form parameters.</param>
            <param name="proxy">The proxy.</param>
            <returns></returns>
        </member>
        <member name="T:Subkismet.IComment">
            <summary>
            Defines the base information about a comment submitted to 
            Akismet.
            </summary>
        </member>
        <member name="P:Subkismet.IComment.Author">
            <summary>
            The name submitted with the comment.
            </summary>
        </member>
        <member name="P:Subkismet.IComment.AuthorEmail">
            <summary>
            The email submitted with the comment.
            </summary>
        </member>
        <member name="P:Subkismet.IComment.AuthorUrl">
            <summary>
            The url submitted if provided.
            </summary>
        </member>
        <member name="P:Subkismet.IComment.Content">
            <summary>
            Content of the comment
            </summary>
        </member>
        <member name="P:Subkismet.IComment.Referrer">
            <summary>
            The HTTP_REFERER header value of the 
            originating comment.
            </summary>
        </member>
        <member name="P:Subkismet.IComment.Permalink">
            <summary>
            Permanent location of the entry the comment was 
            submitted to.
            </summary>
        </member>
        <member name="P:Subkismet.IComment.UserAgent">
            <summary>
            User agent of the requester. (Required)
            </summary>
        </member>
        <member name="P:Subkismet.IComment.CommentType">
            <summary>
            May be one of the following: {blank}, "comment", "trackback", "pingback", or a made-up value 
            like "registration".
            </summary>
        </member>
        <member name="P:Subkismet.IComment.IPAddress">
            <summary>
            IPAddress of the submitter
            </summary>
        </member>
        <member name="P:Subkismet.IComment.ServerEnvironmentVariables">
            <summary>
            Optional collection of various server environment variables. 
            </summary>
        </member>
        <member name="M:Subkismet.Comment.#ctor(System.Net.IPAddress,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.Comment"/> class.
            </summary>
            <param name="authorIpAddress">The author ip address.</param>
            <param name="authorUserAgent">The author user agent.</param>
        </member>
        <member name="P:Subkismet.Comment.Author">
            <summary>
            The name submitted with the comment.
            </summary>
        </member>
        <member name="P:Subkismet.Comment.AuthorEmail">
            <summary>
            The email submitted with the comment.
            </summary>
        </member>
        <member name="P:Subkismet.Comment.AuthorUrl">
            <summary>
            The url submitted if provided.
            </summary>
        </member>
        <member name="P:Subkismet.Comment.Content">
            <summary>
            Content of the comment
            </summary>
        </member>
        <member name="P:Subkismet.Comment.Referrer">
            <summary>
            The HTTP_REFERER header value of the 
            originating comment.
            </summary>
        </member>
        <member name="P:Subkismet.Comment.Permalink">
            <summary>
            Permanent location of the entry the comment was 
            submitted to.
            </summary>
        </member>
        <member name="P:Subkismet.Comment.UserAgent">
            <summary>
            User agent of the requester. (Required)
            </summary>
        </member>
        <member name="P:Subkismet.Comment.CommentType">
            <summary>
            May be one of the following: {blank}, "comment", "trackback", "pingback", or a made-up value 
            like "registration".
            </summary>
        </member>
        <member name="P:Subkismet.Comment.IPAddress">
            <summary>
            IPAddress of the submitter
            </summary>
        </member>
        <member name="P:Subkismet.Comment.ServerEnvironmentVariables">
            <summary>
            Optional collection of various server environment variables. 
            </summary>
        </member>
        <member name="T:Subkismet.Akismet`1">
            <summary>
            Acts as a client to the Akismet service. Use this class to interface with the 
            Akismet service from your web application. For fine grained control, you have 
            the option to use the <see cref="T:Subkismet.AkismetClient"/> class directly.
            </summary>
            <remarks>
            <para>
            The constructors require that you supply a delegate used to convert whatever 
            representation of a comment you have in your system to one that is understood 
            by this system.
            </para>
            <para>
            This provides for loose coupling.
            </para>
            </remarks>
            <typeparam name="TInput">The type of the input.</typeparam>
        </member>
        <member name="M:Subkismet.Akismet`1.CreateSimpleAkismet(System.String,System.Uri)">
            <summary>
            Creates a simple instance of Akismet for those who plan to simply use the <see cref="T:Subkismet.Comment"/> 
            type in their own code.
            </summary>
            <param name="apiKey">The API key.</param>
            <param name="rootUrl">The root URL.</param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.Akismet`1.#ctor(System.String,System.Uri,System.Converter{`0,Subkismet.Comment})">
            <summary>
            Initializes a new instance of the Akismet class.
            </summary>
            <param name="apiKey">The API key.</param>
            <param name="rootUrl">The url of the site hosting and using the Akismet service.</param>
            <param name="commentConverter">A delegate used to convert a comment from the host site into one this library understands.</param>
        </member>
        <member name="M:Subkismet.Akismet`1.#ctor(System.String,System.Uri,System.Converter{`0,Subkismet.Comment},System.Net.IWebProxy)">
            <summary>
            Initializes a new instance of the Akismet class.
            </summary>
            <param name="apiKey">The API key.</param>
            <param name="rootUrl">The url of the site hosting and using the Akismet service.</param>
            <param name="commentConverter">A delegate used to convert a comment from the host site into one this library understands.</param>
            <param name="proxy">The proxy.</param>
        </member>
        <member name="M:Subkismet.Akismet`1.#ctor(Subkismet.IAkismetClient,System.Converter{`0,Subkismet.Comment})">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.Akismet`1"/> class.
            </summary>
            <param name="akismetClient">The akismet client.</param>
            <param name="commentConverter">A delegate used to convert a comment from the host site into one this library understands.</param>
        </member>
        <member name="M:Subkismet.Akismet`1.#ctor(Subkismet.IAkismetClient,System.Converter{`0,Subkismet.Comment},System.Net.IWebProxy)">
            <summary>
            Initializes a new instance of the Akismet class.
            </summary>
            <param name="akismetClient">The akismet client.</param>
            <param name="commentConverter">A delegate used to convert a comment from the host site into one this library understands.</param>
            <param name="proxy">The proxy to use if any. Leave it null if no proxy is required.</param>
        </member>
        <member name="M:Subkismet.Akismet`1.VerifyApiKey">
            <summary>
            Verifies the api key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Subkismet.Akismet`1.IsSpam(`0)">
            <summary>
            Examines the item and determines whether or not it is spam.
            </summary>
            <exception type="InvalidResponseException">Thrown if the response from Akismet is not what we expected.</exception>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.Akismet`1.SubmitGoodFeedback(`0)">
            <summary>
            Submits the item to the service as a false positive. 
            Something that should not have been marked as spam.
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Subkismet.Akismet`1.SubmitSpam(`0)">
            <summary>
            Submits the item to the service as a piece of SPAM that got through 
            the filter. Something that should've been marked as SPAM.
            </summary>
            <param name="comment"></param>
        </member>
        <member name="T:Subkismet.Captcha.InvisibleCaptcha">
            <summary>
            <para>Simple CAPTCHA control that requires the browser to perform a 
            simple calculation via javascript to pass.  
            </para>
            <para>
            If javascript is not enabled, a form is rendered asking the user to add two random 
            small numbers, unless the <see cref="P:Subkismet.Captcha.InvisibleCaptcha.Accessible"/>  property is set to false.
            </para>
            </summary>
        </member>
        <member name="T:Subkismet.Captcha.CaptchaBase">
            <summary>
            </summary>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaBase.EncryptString(System.String)">
            <summary>
            Encrypts the string and returns a base64 encoded encrypted string.
            </summary>
            <param name="clearText">The clear text.</param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaBase.DecryptString(System.String)">
            <summary>
            Decrypts the base64 encrypted string and returns the cleartext.
            </summary>
            <param name="encryptedEncodedText">The clear text.</param>
            <exception type="System.Security.Cryptography.CryptographicException">Thrown the string to be decrypted 
            was encrypted using a different encryptor (for example, if we recompile and 
            receive an old string).</exception>
            <returns></returns>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaBase.ControlPropertiesValid">
            <summary>Checks the properties of the control for valid values.</summary>
            <returns>true if the control properties are valid; otherwise, false.</returns>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaBase.EncryptAnswer(System.String)">
            <summary>
            Encrypts the answer along with the current datetime.
            </summary>
            <param name="answer">The answer.</param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaBase.EvaluateIsValid">
            <summary>
            When overridden in a derived class, this method contains the code to determine whether the value in the input control is valid.
            </summary>
            <returns>
            true if the value in the input control is valid; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Subkismet.Captcha.CaptchaBase.GetEncryptedAnswerFromForm">
            <summary>
            Gets the encrypted answer from form.
            </summary>
            <returns></returns>
            <exception type="CaptchaExpiredException">Thrown when the user takes too long to submit a captcha answer.</exception>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaBase.HiddenEncryptedAnswerFieldName">
            <summary>
            Gets the name of the hidden form field in which the encrypted answer 
            is located.  The answer is sent encrypted to the browser, which must 
            send the answer back.
            </summary>
            <value>The name of the hidden encrypted answer field.</value>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaBase.AnswerFormFieldName">
            <summary>
            The input field (possibly hidden) in which the client 
            will specify the answer.
            </summary>
        </member>
        <member name="M:Subkismet.Captcha.InvisibleCaptcha.OnInit(System.EventArgs)">
            <summary>
            Sets up a hashed answer.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Subkismet.Captcha.InvisibleCaptcha.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:Subkismet.Captcha.InvisibleCaptcha.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Displays the control on the client.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"></see> that contains the output stream for rendering on the client.</param>
        </member>
        <member name="P:Subkismet.Captcha.InvisibleCaptcha.VisibleAnswerFieldName">
            <summary>
            If Accessible is true and javascript disabled, this is the 
            form field in which the answer would be entered by the user.
            </summary>
        </member>
        <member name="P:Subkismet.Captcha.InvisibleCaptcha.Accessible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Subkismet.Captcha.InvisibleCaptcha"/> is accessible 
            to non-javascript browsers.  If false, then non-javascript browsers will always fail 
            validation.
            </summary>
            <value><c>true</c> if accessible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Subkismet.Captcha.InvisibleCaptcha.CaptchaInputClientId">
            <summary>
            Id of the span used to house the visible captcha section.
            </summary>
        </member>
        <member name="T:Subkismet.Captcha.CaptchaExpiredException">
            <summary>
            Exception thrown when a captcha image has expired.
            </summary>
            <remarks>
            This exception does not have any custom properties, 
            thus it does not implement ISerializable.
            </remarks>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaExpiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.Captcha.CaptchaExpiredException"/> class.
            </summary>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaExpiredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.Captcha.CaptchaExpiredException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.Captcha.CaptchaExpiredException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Subkismet.Captcha.AnswerAndDate">
            <summary>
            Represents the answer and date returned by the 
            client.
            </summary>
        </member>
        <member name="M:Subkismet.Captcha.AnswerAndDate.ParseAnswerAndDate(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.Captcha.AnswerAndDate"/> class.
            </summary>
            <param name="encryptedAnswer">The encrypted answer.</param>
            <param name="timeoutInSeconds">Number of seconds before captcha expires.</param>
        </member>
        <member name="P:Subkismet.Captcha.AnswerAndDate.Answer">
            <summary>
            Gets the answer.
            </summary>
            <value>The answer.</value>
        </member>
        <member name="P:Subkismet.Captcha.AnswerAndDate.Date">
            <summary>
            Gets the date the answer was rendered.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:Subkismet.Captcha.AnswerAndDate.Expired">
            <summary>
            Gets a value indicating whether this <see cref="T:Subkismet.Captcha.AnswerAndDate"/> is expired.
            </summary>
            <value><c>true</c> if expired; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Subkismet.InvalidResponseException">
            <summary>
            Exception thrown when a response other than 200 is returned.
            </summary>
            <remarks>
            This exception does not have any custom properties, 
            thus it does not implement ISerializable.
            </remarks>
        </member>
        <member name="M:Subkismet.InvalidResponseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.InvalidResponseException"/> class.
            </summary>
        </member>
        <member name="M:Subkismet.InvalidResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.InvalidResponseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Subkismet.InvalidResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.InvalidResponseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Subkismet.InvalidResponseException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Subkismet.InvalidResponseException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.InvalidResponseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="status">The status.</param>
        </member>
        <member name="P:Subkismet.InvalidResponseException.HttpStatus">
            <summary>
            Gets the HTTP status returned by the service.
            </summary>
            <value>The HTTP status.</value>
        </member>
        <member name="T:Subkismet.Captcha.CaptchaImageHandler">
            <summary>
            Handles a special request for a CAPTCHA image.  The request must 
            pass the specs for the image via an encrypted serialized instance 
            of <see cref="T:Subkismet.Captcha.CaptchaInfo"/>.
            </summary>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaImageHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Renders the Captcha Image.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides 
            references to the intrinsic server objects (for example, Request, Response, Session, and Server) 
            used to service HTTP requests.</param>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaImageHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:Subkismet.Captcha.CaptchaControl">
            <summary>
            Implements an image based Captcha validator control.
            </summary>
            <remarks>
            In order for the Captcha control to work, you need to map the request for the captcha image 
            renderer in web.config.
            <example>
            &lt;configuration&gt;
            ...
              &lt;system.web&gt;
                &lt;httpHandlers&gt;
                ...
                  &lt;add verb="*" path="*CaptchaImage.ashx" type="Subkismet.Captcha.CaptchaImageHandler, Subkismet"/&gt;
                &lt;/httpHandlers&gt;
              &lt;/system.web&gt;
            &lt;/configuration&gt;
            </example>
            </remarks>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.Captcha.CaptchaControl"/> class.
            </summary>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaControl.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Loads the post data.
            </summary>
            <param name="PostDataKey">The post data key.</param>
            <param name="Values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaControl.EvaluateIsValid">
            <summary>
            When overridden in a derived class, this method contains the code to determine 
            whether the value in the input control is valid.
            </summary>
            <returns>
            true if the value in the input control is valid; otherwise, false.
            </returns>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaControl.OnPreRender(System.EventArgs)">
            <summary>
            Generates the captcha if it hasn't been generated already.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaControl.RaisePostDataChangedEvent">
            <summary>
            When implemented by a class, signals the server control to notify the ASP.NET application 
            that the state of the control has changed.
            </summary>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaControl.CaptchaText">
            <summary>
            The text to render.
            </summary>
        </member>
        <member name="F:Subkismet.Captcha.CaptchaControl.Layout.CssBased">
            <summary>
            Indicates that the layout will be handled by external css.
            </summary>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.Captcha.CaptchaInfo"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaInfo.RandomFontFamily">
            <summary>
            Returns a random font family name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaInfo.ToEncryptedString">
            <summary>
            Returns a base 64 encrypted serialized representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaInfo.FromEncryptedString(System.String)">
            <summary>
            Reconstructs an instance of this type from an encrypted serialized string.
            </summary>
            <param name="encrypted"></param>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaInfo.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaInfo.TextChars">
            <summary>
            A string of valid characters to use in the Captcha text.  
            A random character will be selected from this string for 
            each character.
            </summary>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaInfo.Text">
            <summary>
            Gets or sets the text to render.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaInfo.TextLength">
            <summary>
            Number of characters to use in the CAPTCHA test.
            </summary>
            <value>The length of the text.</value>
        </member>
        <member name="T:Subkismet.IAkismetClient">
            <summary>
            The client class used to communicate with the 
            <see href="http://akismet.com/">Akismet</see> service.
            </summary>
        </member>
        <member name="M:Subkismet.IAkismetClient.CheckCommentForSpam(Subkismet.IComment)">
            <summary>
            Checks the comment and returns true if it is spam, otherwise false.
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.IAkismetClient.SubmitHam(Subkismet.IComment)">
            <summary>
            Submits a comment to Akismet that should not have been 
            flagged as SPAM (a false positive).
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.IAkismetClient.SubmitSpam(Subkismet.IComment)">
            <summary>
            Submits a comment to Akismet that should have been 
            flagged as SPAM, but was not flagged by Akismet.
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.IAkismetClient.VerifyApiKey">
            <summary>
            Verifies the API key.  You really only need to
            call this once, perhaps at startup.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Subkismet.IAkismetClient.ApiKey">
            <summary>
            Gets or sets the Akismet API key.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="P:Subkismet.IAkismetClient.RootUrl">
            <summary>
            Gets or sets the root URL to the blog.
            </summary>
            <value>The blog URL.</value>
        </member>
        <member name="P:Subkismet.IAkismetClient.Proxy">
            <summary>
            Gets or sets the proxy to use.
            </summary>
            <value>The proxy.</value>
        </member>
        <member name="P:Subkismet.IAkismetClient.Timeout">
            <summary>
            Gets or sets the timeout in milliseconds for the http request to Akismet. 
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:Subkismet.IAkismetClient.UserAgent">
            <summary>
            Gets or sets the Usera Agent for the Akismet Client.  
            Do not confuse this with the user agent for the comment 
            being checked.
            </summary>
        </member>
        <member name="T:Subkismet.AkismetClient">
            <summary>
            The client class used to communicate with the 
            <see href="http://akismet.com/">Akismet</see> service.
            </summary>
        </member>
        <member name="M:Subkismet.AkismetClient.#ctor(System.String,System.Uri,Subkismet.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.AkismetClient"/> class.
            </summary>
            <remarks>
            This constructor takes in all the dependencies to allow for 
            dependency injection and unit testing. Seems like overkill, 
            but it's worth it.
            </remarks>
            <param name="apiKey">The Akismet API key.</param>
            <param name="blogUrl">The root url of the blog.</param>
            <param name="httpClient">Client class used to make the underlying requests.</param>
        </member>
        <member name="M:Subkismet.AkismetClient.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.AkismetClient"/> class.
            </summary>
            <param name="apiKey">The Akismet API key.</param>
            <param name="rootUrl">The root url of the site using Akismet.</param>
        </member>
        <member name="M:Subkismet.AkismetClient.BuildUserAgent(System.String)">
            <summary>
            Helper method for building a user agent string in the format 
            preferred by Akismet.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.AkismetClient.VerifyApiKey">
            <summary>
            Verifies the API key.  You really only need to
            call this once, perhaps at startup.
            </summary>
            <returns></returns>
            <exception type="Sytsem.Web.WebException">If it cannot make a request of Akismet.</exception>
        </member>
        <member name="M:Subkismet.AkismetClient.CheckCommentForSpam(Subkismet.IComment)">
            <summary>
            Checks the comment and returns true if it is spam, otherwise false.
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.AkismetClient.SubmitSpam(Subkismet.IComment)">
            <summary>
            Submits a comment to Akismet that should have been 
            flagged as SPAM, but was not flagged by Akismet.
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:Subkismet.AkismetClient.SubmitHam(Subkismet.IComment)">
            <summary>
            Submits a comment to Akismet that should not have been 
            flagged as SPAM (a false positive).
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="P:Subkismet.AkismetClient.ApiKey">
            <summary>
            Gets or sets the Akismet API key.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="P:Subkismet.AkismetClient.UserAgent">
            <summary>
            Gets or sets the Usera Agent for the Akismet Client.  
            Do not confuse this with the user agent for the comment 
            being checked.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="P:Subkismet.AkismetClient.Timeout">
            <summary>
            Gets or sets the timeout in milliseconds for the http request to Akismet. 
            By default 5000 (5 seconds).
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:Subkismet.AkismetClient.RootUrl">
            <summary>
            Gets or sets the root URL to the blog.
            </summary>
            <value>The blog URL.</value>
        </member>
        <member name="P:Subkismet.AkismetClient.Proxy">
            <summary>
            Gets or sets the proxy to use.
            </summary>
            <value>The proxy.</value>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subkismet.Captcha.CaptchaImage"/> class.
            </summary>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaImage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaImage.Dispose(System.Boolean)">
            <summary>
            Disposes the Captcha image.
            </summary>
            <param name="disposing">if set to <c>true</c> [disposing].</param>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaImage.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Subkismet.Captcha.CaptchaImage"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Subkismet.Captcha.CaptchaImage.GenerateImage">
            <summary>
            Generates a new Captcha image.
            </summary>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaImage.FontWarp">
            <summary>
            Amount of random waping to apply to rendered text.
            </summary>
            <value>The font warp.</value>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaImage.Height">
            <summary>
            Height of the Captcha image in pixels.
            </summary>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaImage.Image">
            <summary>
            Gets the captcha image to display based on the current property 
            values.  Will render the image if it hasn't been rendered yet.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaImage.Width">
            <summary>
            Width of the Captcha image in pixels.
            </summary>
        </member>
        <member name="P:Subkismet.Captcha.CaptchaImage.Text">
            <summary>
            Gets or sets the text to render (warped of course).
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:Subkismet.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Subkismet.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Subkismet.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Subkismet.Properties.Resources.ArgumentNull_Generic">
            <summary>
              Looks up a localized string similar to Value cannot be null..
            </summary>
        </member>
        <member name="P:Subkismet.Properties.Resources.ArgumentNull_String">
            <summary>
              Looks up a localized string similar to String reference not set to an instance of a String..
            </summary>
        </member>
        <member name="P:Subkismet.Properties.Resources.ArgumentNull_Uri">
            <summary>
              Looks up a localized string similar to URI cannot be null..
            </summary>
        </member>
        <member name="P:Subkismet.Properties.Resources.InvalidResponse_Generic">
            <summary>
              Looks up a localized string similar to The service was not able to handle our request. Http Status &apos;{0}&apos;..
            </summary>
        </member>
    </members>
</doc>
