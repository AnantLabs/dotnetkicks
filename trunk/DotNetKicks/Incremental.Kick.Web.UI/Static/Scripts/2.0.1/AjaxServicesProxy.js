// This JavaScript was automatically generated by
// Jayrock.JsonRpc.Web.JsonRpcProxyGenerator, Jayrock, Version=0.9.8316.0, Culture=neutral, PublicKeyToken=null
// on 21 September 2007 at 23:30:05 (GMT Daylight Time)

// Proxy version 1.0

function AjaxServices(url)
{
    this["addShout"] = function(hostID, message, callback)
    {
        return call("addShout", [ hostID, message ], callback);
    }
    
    this["addShoutForUser"] = function(hostID, message, username, callback)
    {
        return call("addShoutForUser", [ hostID, message, username ], callback);
    }
    
    this["getLatestShouts"] = function(hostID, callback)
    {
        return call("getLatestShouts", [ hostID ], callback);
    }
    
    this["getLatestShoutsForUser"] = function(hostID, username, callback)
    {
        return call("getLatestShoutsForUser", [ hostID, username ], callback);
    }
    
    this["getSpyHtml"] = function(hostID, callback)
    {
        return call("getSpyHtml", [ hostID ], callback);
    }
    
    this["fetchKickedStoryUrlByUrl"] = function(url, callback)
    {
        return call("fetchKickedStoryUrlByUrl", [ url ], callback);
    }
    
    this["checkUsernameExists"] = function(username, callback)
    {
        return call("checkUsernameExists", [ username ], callback);
    }
    
    this["checkEmailExists"] = function(email, callback)
    {
        return call("checkEmailExists", [ email ], callback);
    }
    
    /* Returns an array of method names implemented by this service. */
    
    this["system.listMethods"] = function(callback)
    {
        return call("system.listMethods", [ ], callback);
    }
    
    /* Returns the version server implementation using the major, minor, build and revision format. */
    
    this["system.version"] = function(callback)
    {
        return call("system.version", [ ], callback);
    }
    
    /* Returns a summary about the server implementation for display purposes. */
    
    this["system.about"] = function(callback)
    {
        return call("system.about", [ ], callback);
    }
    
    var url = typeof(url) === 'string' ? url : '/services/ajax/ajaxservices.ashx';
    var self = this;
    var nextId = 0;

    function call(method, params, callback)
    {
        var request = { id : nextId++, method : method, params : params };
        return callback == null ? 
            callSync(method, request) : callAsync(method, request, callback);
    }

    function callSync(method, request)
    {
        var http = newHTTP();
        http.open('POST', url, false, self.httpUserName, self.httpPassword);
        setupHeaders(http, method);
        http.send(JSON.stringify(request));
        if (http.status != 200)
            throw { message : http.status + ' ' + http.statusText, toString : function() { return message; } };
        var response = JSON.eval(http.responseText);
        if (response.error != null) throw response.error;
        return response.result;
    }

    function callAsync(method, request, callback)
    {
        var http = newHTTP();
        http.open('POST', url, true, self.httpUserName, self.httpPassword);
        setupHeaders(http, method);
        http.onreadystatechange = function() { http_onreadystatechange(http, callback); }
        http.send(JSON.stringify(request));
        return request.id;
    }

    function setupHeaders(http, method)
    {
        http.setRequestHeader('Content-Type', 'text/plain; charset=utf-8');
        http.setRequestHeader('X-JSON-RPC', method);
    }

    function http_onreadystatechange(sender, callback)
    {
        if (sender.readyState == /* complete */ 4)
        {
            var response = sender.status == 200 ? 
                JSON.eval(sender.responseText) : {};
            
            response.xmlHTTP = sender;
                
            callback(response);
        }
    }

    function newHTTP()
    {
        if (typeof(window) != 'undefined' && window.XMLHttpRequest)
            return new XMLHttpRequest(); /* IE7, Safari 1.2, Mozilla 1.0/Firefox, and Netscape 7 */
        else
            return new ActiveXObject('Microsoft.XMLHTTP'); /* WSH and IE 5 to IE 6 */
    }
}

AjaxServices.rpcMethods = ["addShout","addShoutForUser","getLatestShouts","getLatestShoutsForUser","getSpyHtml","fetchKickedStoryUrlByUrl","checkUsernameExists","checkEmailExists","system.listMethods","system.version","system.about"];
