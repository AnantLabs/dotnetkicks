using System;
using System.Text.RegularExpressions;
using System.Collections;
using System.IO;
using System.Text;
using SubSonic;
using SubSonic.CodeGenerator;
using System.Data;
using System.Configuration;
using SubSonic.Utilities;

namespace SubSonic.CodeGenerator
{
	/// <summary>
	/// Summary description for ParseManager.
	/// </summary>
	public class Parser
	{
		public Parser()
		{
			//
			// TODO: Add constructor logic here
			//
		}
		public static void Main()
		{			
		}
		public static string Render()
		{
			MemoryStream mStream = new MemoryStream();
			StreamWriter writer = new StreamWriter(mStream,System.Text.Encoding.UTF8);
			
						writer.Write(@"" );			writer.Write(@"


" );			
    //The data we need
    string providerName = "TempGJ";
    string tableName = "Categories";
    TableSchema.Table tbl = DataService.GetSchema(tableName, providerName);
    DataProvider provider = DataService.Providers[providerName];
    LanguageType lang = LanguageType.CSharp;

    TableSchema.TableColumnCollection cols = tbl.Columns;
    string className = tbl.ClassName;
	string thisPK = tbl.PrimaryKey.PropertyName;
	string varPK = tbl.PrimaryKey.ArgumentName;
	string varPKType = Utility.GetVariableType(tbl.PrimaryKey.DataType, tbl.PrimaryKey.IsNullable, lang);
			writer.Write(@"
//Generated on " );			writer.Write(DateTime.Now.ToString() );			writer.Write(@" by " );			writer.Write(Environment.UserName );			writer.Write(@"
namespace " );			writer.Write(provider.GeneratedNamespace );			writer.Write(@"{


    /// <summary>
    /// Strongly-typed collection for the " );			writer.Write(className);			writer.Write(@" class.
    /// </summary>

    [Serializable]
    public partial class " );			writer.Write(className);			writer.Write(@"Collection : ActiveList[<]" );			writer.Write( className);			writer.Write(@"[>] 
    {
        List[<]Where[>] wheres = new List[<]Where[>]();
        List[<]BetweenAnd[>] betweens = new List[<]BetweenAnd[>]();
        SubSonic.OrderBy orderBy;
    	
        public " );			writer.Write(className);			writer.Write(@"Collection OrderByAsc(string columnName) 
	    {
            this.orderBy = SubSonic.OrderBy.Asc(columnName);
            return this;
        }
    	
        public " );			writer.Write(className);			writer.Write(@"Collection OrderByDesc(string columnName) 
	    {
            this.orderBy = SubSonic.OrderBy.Desc(columnName);
            return this;
        }

	    public " );			writer.Write(className);			writer.Write(@"Collection WhereDatesBetween(string columnName, DateTime dateStart, DateTime dateEnd) 
	    {
            return this;
        }

        public " );			writer.Write(className);			writer.Write(@"Collection Where(Where where) 
	    {
            wheres.Add(where);
            return this;
        }
    	
        public " );			writer.Write(className);			writer.Write(@"Collection Where(string columnName, object value) 
	    {
		    if(value != DBNull.Value && value != null)
		    {	
			    return Where(columnName, Comparison.Equals, value);
		    }
		    else
		    {
			    return Where(columnName, Comparison.Is, DBNull.Value);
		    }
        }
    	
        public " );			writer.Write(className);			writer.Write(@"Collection Where(string columnName, Comparison comp, object value) 
	    {
            Where where = new Where();
            where.ColumnName = columnName;
            where.Comparison = comp;
            where.ParameterValue = value;
            Where(where);
            return this;
        }
    	
        public " );			writer.Write(className);			writer.Write(@"Collection BetweenAnd(string columnName, DateTime dateStart, DateTime dateEnd) 
	    {
            BetweenAnd between = new BetweenAnd();
            between.ColumnName = columnName;
            between.StartDate = dateStart;
            between.EndDate = dateEnd;
            between.StartParameterName = ""start"" + columnName; 
            between.EndParameterName = ""end"" + columnName; 
            betweens.Add(between);
            return this;
        }
    	
        public " );			writer.Write(className);			writer.Write(@"Collection Load() 
        {
            Query qry = new Query(" );			writer.Write(className);			writer.Write(@".Schema);
            CheckLogicalDelete(qry);
            foreach (Where where in wheres) 
            {
                qry.AddWhere(where);
            }
             
            foreach (BetweenAnd between in betweens)
            {
                qry.AddBetweenAnd(between);
            }

            if (orderBy != null)
            {
                qry.OrderBy = orderBy;
            }

            IDataReader rdr = qry.ExecuteReader();
            this.Load(rdr);
            rdr.Close();
            return this;
        }
        
        public " );			writer.Write(className);			writer.Write(@"Collection() 
	    {
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the " );			writer.Write(tableName);			writer.Write(@" table.
    /// </summary>
    [Serializable]
    public partial class " );			writer.Write(className);			writer.Write(@" : ActiveRecord[<]" );			writer.Write( className);			writer.Write(@"[>]
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion

        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
	    {
            if(!IsSchemaInitialized)
            {
                //Schema declaration

				TableSchema.Table schema = new TableSchema.Table(DataService.GetInstance(""" );			writer.Write(providerName );			writer.Write(@"""));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.Name = """ );			writer.Write(tableName);			writer.Write(@""";
                schema.SchemaName = """ );			writer.Write(tbl.SchemaName);			writer.Write(@""";

                //columns
                " );			
                foreach(TableSchema.TableColumn col in cols)
                {
                    string varName = "col" + col.ArgumentName;
                			writer.Write(@"
                TableSchema.TableColumn " );			writer.Write(varName );			writer.Write(@" = new TableSchema.TableColumn(schema);
                " );			writer.Write(varName );			writer.Write(@".ColumnName = """ );			writer.Write(col.ColumnName);			writer.Write(@""";
                " );			writer.Write(varName );			writer.Write(@".DataType = DbType." );			writer.Write(col.DataType );			writer.Write(@";
                " );			writer.Write(varName );			writer.Write(@".MaxLength = " );			writer.Write(col.MaxLength );			writer.Write(@";
                " );			writer.Write(varName );			writer.Write(@".AutoIncrement = " );			writer.Write(col.AutoIncrement.ToString().ToLower() );			writer.Write(@";
                " );			writer.Write(varName );			writer.Write(@".IsNullable = " );			writer.Write(col.IsNullable.ToString().ToLower());			writer.Write(@";
                " );			writer.Write(varName );			writer.Write(@".IsPrimaryKey = " );			writer.Write(col.IsPrimaryKey.ToString().ToLower());			writer.Write(@";
                " );			writer.Write(varName );			writer.Write(@".IsForeignKey = " );			writer.Write(col.IsForeignKey.ToString().ToLower());			writer.Write(@";
                " );			writer.Write(varName );			writer.Write(@".IsReadOnly = " );			writer.Write( col.IsReadOnly.ToString().ToLower() );			writer.Write(@";
                " );			
				if(col.IsForeignKey)
				{
                			writer.Write(@"
				" );			writer.Write(varName );			writer.Write(@".ForeignKeyTableName = """ );			writer.Write( col.ForeignKeyTableName );			writer.Write(@""";
                " );			 } 			writer.Write(@"
                schema.Columns.Add(" );			writer.Write(varName);			writer.Write(@");

                " );			
                }
                			writer.Write(@"
                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers[""" );			writer.Write(providerName );			writer.Write(@"""].AddSchema(""" );			writer.Write(tableName);			writer.Write(@""",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public " );			writer.Write(className );			writer.Write(@"()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

	    public " );			writer.Write(className );			writer.Write(@"(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public " );			writer.Write(className );			writer.Write(@"(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
        " );			
        foreach(TableSchema.TableColumn col in cols){
            string propName = col.PropertyName;
            string varType = Utility.GetVariableType(col.DataType, col.IsNullable, lang);
        			writer.Write(@"  
        [XmlAttribute(""" );			writer.Write(propName);			writer.Write(@""")]
        public " );			writer.Write(varType);			writer.Write(@" " );			writer.Write(propName);			writer.Write(@" 
	    {
		    get { return GetColumnValue[<]" );			writer.Write( varType);			writer.Write(@"[>](""" );			writer.Write(propName);			writer.Write(@"""); }
            set 
		    {
			    MarkDirty();
			    SetColumnValue(""" );			writer.Write(propName);			writer.Write(@""", value);
            }
        }
	    " );			
	    }
	    			writer.Write(@"
	    #endregion
	    
	    " );			if (tbl.ForeignKeys.Count > 0) { 			writer.Write(@"
	    #region ForeignKey Methods
	    " );			
            TableSchema.ForeignKeyTableCollection fkTables = tbl.ForeignKeys;
			
            if (fkTables != null) {
				ArrayList usedPropertyNames = new ArrayList();
                foreach (TableSchema.ForeignKeyTable fk in tbl.ForeignKeys) 
				{
                    Convention c = new Convention(provider);
                    TableSchema.Table fkTbl = DataService.GetSchema(fk.TableName, providerName);
                    string fkClass = fk.ClassName;
                    string fkMethod = fk.ClassName;
                    string fkID = c.PropertyName(fk.PropertyName, fk.TableName);
                    
					
                    //it's possible this table is "relatin to itself"
                    //check to make sure the class names are not the same
                    //if they are, use the fk columnName
					if (fk.ClassName == className)
					{
					    fkMethod = fk.ClassName + "Children";
					}

					if (usedPropertyNames.Contains(fk.ClassName))
					{
						fkMethod += "From" + fkID;
					}
			writer.Write(@"
        /// <summary>
        /// Returns a " );			writer.Write(fkClass);			writer.Write(@" ActiveRecord object related to this " );			writer.Write(className);			writer.Write(@"
        /// </summary>
	    public " );			writer.Write(fkClass);			writer.Write(@" " );			writer.Write(fkMethod);			writer.Write(@"
        {
	        get { return " );			writer.Write(fkClass);			writer.Write(@".FetchByID(this." );			writer.Write(fkID);			writer.Write(@"); }
	        set
	        {
		        MarkDirty();
		        SetColumnValue(""" );			writer.Write(fkID);			writer.Write(@""", value." );			writer.Write(fkTbl.PrimaryKey.PropertyName);			writer.Write(@");
	        }
        }
	    
	    " );			
			usedPropertyNames.Add(fk.ClassName);
            }
        }
	    			writer.Write(@"
	    #endregion
	    " );			} else {			writer.Write(@"
	    //no foreign key tables defined (" );			writer.Write(tbl.ForeignKeys.Count.ToString() );			writer.Write(@")
	    " );			} 			writer.Write(@"
	    
	    " );			if (tbl.ManyToManys.Count > 0) { 			writer.Write(@"
	    #region Many To Many Helpers
	    " );			
			TableSchema.ManyToManyRelationshipCollection mm = tbl.ManyToManys;
			if (mm != null)
			{
				foreach (TableSchema.ManyToManyRelationship m in mm)
				{
					string fkClass = m.ForeignTableClassName;
                
	    			writer.Write(@"
	     
        public " );			writer.Write(fkClass);			writer.Write(@"Collection Get" );			writer.Write(fkClass);			writer.Write(@"Collection() {

            return " );			writer.Write(className);			writer.Write(@".Get" );			writer.Write(fkClass);			writer.Write(@"Collection(this." );			writer.Write(thisPK);			writer.Write(@");

        }
        public static " );			writer.Write(fkClass);			writer.Write(@"Collection Get" );			writer.Write(fkClass);			writer.Write(@"Collection(" );			writer.Write( varPKType );			writer.Write(@" " );			writer.Write( varPK );			writer.Write(@") {

            SubSonic.QueryCommand cmd = new SubSonic.QueryCommand(
                ""SELECT * FROM " );			writer.Write(m.ForeignTableName);			writer.Write(@" INNER JOIN " );			writer.Write(m.MapTableName);			writer.Write(@" ON ""+
                """ );			writer.Write(m.ForeignTableName);			writer.Write(@"." );			writer.Write(m.ForeignPrimaryKey);			writer.Write(@"=" );			writer.Write(m.MapTableName);			writer.Write(@"." );			writer.Write(m.ForeignPrimaryKey);			writer.Write(@" WHERE " );			writer.Write(m.MapTableName);			writer.Write(@"." );			writer.Write(thisPK);			writer.Write(@"=@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write(className);			writer.Write(@".Schema.Provider.Name);
            
            cmd.AddParameter(""@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write( varPK );			writer.Write(@");
            
            IDataReader rdr = SubSonic.DataService.GetReader(cmd);
            " );			writer.Write(fkClass);			writer.Write(@"Collection coll = new " );			writer.Write(fkClass);			writer.Write(@"Collection();
            coll.LoadAndCloseReader(rdr);

            return coll;

        }
        public static void Save" );			writer.Write(fkClass);			writer.Write(@"Map(" );			writer.Write( varPKType );			writer.Write(@" " );			writer.Write( varPK );			writer.Write(@", " );			writer.Write(fkClass);			writer.Write(@"Collection items) {
            
            QueryCommandCollection coll = new SubSonic.QueryCommandCollection();

            //delete out the existing
            QueryCommand cmdDel = new QueryCommand(""DELETE FROM " );			writer.Write(m.MapTableName);			writer.Write(@" WHERE " );			writer.Write(thisPK);			writer.Write(@"=@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write(className);			writer.Write(@".Schema.Provider.Name);
            cmdDel.AddParameter(""@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write( varPK );			writer.Write(@");
            //add this in
            coll.Add(cmdDel);

            QueryCommand cmd = null;
            //loop the items and insert
            string iSql = """";
            foreach (" );			writer.Write(fkClass);			writer.Write(@" item in items)
            {
                iSql = ""INSERT INTO " );			writer.Write(m.MapTableName);			writer.Write(@" (" );			writer.Write(m.ForeignPrimaryKey);			writer.Write(@", " );			writer.Write(thisPK);			writer.Write(@")"" + "" VALUES (@" );			writer.Write(m.ForeignPrimaryKey);			writer.Write(@",@" );			writer.Write(thisPK);			writer.Write(@")"";

                cmd = new QueryCommand(iSql, " );			writer.Write(className);			writer.Write(@".Schema.Provider.Name);
                cmd.Parameters.Add(""@" );			writer.Write(m.ForeignPrimaryKey);			writer.Write(@""", item.GetPrimaryKeyValue());
                cmd.Parameters.Add(""@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write( varPK );			writer.Write(@");

                coll.Add(cmd);
            }

            //execute
            DataService.ExecuteTransaction(coll);
        }

        public static void Save" );			writer.Write(fkClass);			writer.Write(@"Map(" );			writer.Write( varPKType );			writer.Write(@" " );			writer.Write( varPK );			writer.Write(@", System.Web.UI.WebControls.ListItemCollection itemList) 
        {
            QueryCommandCollection coll = new SubSonic.QueryCommandCollection();

            //delete out the existing
             QueryCommand cmdDel = new QueryCommand(""DELETE FROM " );			writer.Write(m.MapTableName);			writer.Write(@" WHERE " );			writer.Write(thisPK);			writer.Write(@"=@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write(className);			writer.Write(@".Schema.Provider.Name);
            cmdDel.AddParameter(""@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write( varPK );			writer.Write(@");

            //add this in
            coll.Add(cmdDel);

            QueryCommand cmd = null;
            //loop the items and insert
            string iSql = """";
            foreach (System.Web.UI.WebControls.ListItem l in itemList) 
            {
                if (l.Selected) 
                {
                    iSql = ""INSERT INTO " );			writer.Write(m.MapTableName);			writer.Write(@" (" );			writer.Write(m.ForeignPrimaryKey);			writer.Write(@", " );			writer.Write(thisPK);			writer.Write(@")"" + "" VALUES (@" );			writer.Write(m.ForeignPrimaryKey);			writer.Write(@",@" );			writer.Write( varPK );			writer.Write(@")"";

				    cmd = new QueryCommand(iSql, " );			writer.Write(className);			writer.Write(@".Schema.Provider.Name);
				    cmd.Parameters.Add(""@" );			writer.Write(m.ForeignPrimaryKey);			writer.Write(@""", l.Value);
				    cmd.Parameters.Add(""@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write( varPK );			writer.Write(@");
				    coll.Add(cmd);
                }
            }

            //execute
            DataService.ExecuteTransaction(coll);
        }

        public static void Save" );			writer.Write(fkClass);			writer.Write(@"Map(" );			writer.Write( varPKType );			writer.Write(@" " );			writer.Write( varPK );			writer.Write(@" , " );			writer.Write( varPKType );			writer.Write(@"[] itemList) 
        {
            QueryCommandCollection coll = new SubSonic.QueryCommandCollection();

            //delete out the existing
             QueryCommand cmdDel = new QueryCommand(""DELETE FROM " );			writer.Write(m.MapTableName);			writer.Write(@" WHERE " );			writer.Write(thisPK);			writer.Write(@"=@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write(className);			writer.Write(@".Schema.Provider.Name);
            cmdDel.AddParameter(""@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write( varPK );			writer.Write(@");

            //add this in
            coll.Add(cmdDel);

            QueryCommand cmd = null;
            //loop the items and insert
            string iSql = """";
            foreach (" );			writer.Write( varPKType );			writer.Write(@" item in itemList) 
            {
                iSql = ""INSERT INTO " );			writer.Write(m.MapTableName);			writer.Write(@" (" );			writer.Write(m.ForeignPrimaryKey);			writer.Write(@", " );			writer.Write(thisPK);			writer.Write(@")"" + "" VALUES (@" );			writer.Write(m.ForeignPrimaryKey);			writer.Write(@",@" );			writer.Write(thisPK);			writer.Write(@")"";

			    cmd = new QueryCommand(iSql, " );			writer.Write(className);			writer.Write(@".Schema.Provider.Name);
			    cmd.Parameters.Add(""@" );			writer.Write(m.ForeignPrimaryKey);			writer.Write(@""", item);
			    cmd.Parameters.Add(""@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write( varPK );			writer.Write(@");

                coll.Add(cmd);
            }
            
            //execute
            DataService.ExecuteTransaction(coll);
        }
        
        public static void Delete" );			writer.Write(fkClass);			writer.Write(@"Map(" );			writer.Write( varPKType );			writer.Write(@" " );			writer.Write( varPK );			writer.Write(@") 
        {
            QueryCommand cmdDel = new QueryCommand(""DELETE FROM " );			writer.Write(m.MapTableName);			writer.Write(@" WHERE " );			writer.Write(thisPK);			writer.Write(@"=@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write(className);			writer.Write(@".Schema.Provider.Name);
            cmdDel.AddParameter(""@" );			writer.Write(thisPK);			writer.Write(@""", " );			writer.Write( varPK );			writer.Write(@");
            DataService.ExecuteQuery(cmdDel);
		}

	    " );			
			}
		}
	    			writer.Write(@"
	    #endregion
	    " );			} else {			writer.Write(@"
	    //no ManyToMany tables defined (" );			writer.Write(tbl.ManyToManys.Count.ToString() );			writer.Write(@")
	    " );			} 			writer.Write(@"

	    #region ObjectDataSource support
    	" );			
            string insertArgs = string.Empty;
            string updateArgs = string.Empty;
			string seperator = ",";

			foreach (TableSchema.TableColumn col in cols)
			{
				string propName = col.ArgumentName;
				string varType = Utility.GetVariableType(col.DataType, col.IsNullable, lang);
				
				updateArgs += varType + " " + propName + seperator;
				if (!col.IsPrimaryKey)
				{
					insertArgs += varType + " " + propName + seperator;
				}
			}
			if (insertArgs.Length > 0)
				insertArgs = insertArgs.Remove(insertArgs.Length - seperator.Length, seperator.Length);
 			if (updateArgs.Length > 0)
				updateArgs = updateArgs.Remove(updateArgs.Length - seperator.Length, seperator.Length);
    				writer.Write(@"
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
	    public static void Insert(" );			writer.Write(insertArgs);			writer.Write(@")
	    {
		    " );			writer.Write(className );			writer.Write(@" item = new " );			writer.Write(className );			writer.Write(@"();
		    " );			 
		    foreach (TableSchema.TableColumn col in cols) {
                if (!col.IsPrimaryKey) { 
            			writer.Write(@"
            item." );			writer.Write(col.PropertyName);			writer.Write(@" = " );			writer.Write(col.ArgumentName);			writer.Write(@";
            " );			
                }
              } 
            			writer.Write(@"
	    
		    if (System.Web.HttpContext.Current != null)
			    item.Save(System.Web.HttpContext.Current.User.Identity.Name);
		    else
			    item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
	    }

    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
	    public static void Update(" );			writer.Write(updateArgs);			writer.Write(@")
	    {
		    " );			writer.Write(className );			writer.Write(@" item = new " );			writer.Write(className );			writer.Write(@"();
		    " );			 
		    foreach (TableSchema.TableColumn col in cols) 
			{
							writer.Write(@"
                item." );			writer.Write(col.PropertyName);			writer.Write(@" = " );			writer.Write(col.ArgumentName);			writer.Write(@";
				" );			
			} 
            			writer.Write(@"
		    item.IsNew = false;
		    if (System.Web.HttpContext.Current != null)
			    item.Save(System.Web.HttpContext.Current.User.Identity.Name);
		    else
			    item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
	    }

	    #endregion

	    #region Columns Struct
	    public struct Columns
	    {
		    
		    " );			 
		    foreach (TableSchema.TableColumn col in cols) {
                string propName = col.PropertyName;
            			writer.Write(@"
            public static string " );			writer.Write(propName);			writer.Write(@" = @""" );			writer.Write(propName);			writer.Write(@""";
            " );			
              } 
            			writer.Write(@"

	    }
	    #endregion
    }
}" );			writer.Write(@"" );
//
            StreamReader sr = new StreamReader(mStream); 
			writer.Flush();
			mStream.Position = 0; 
			string returndata = sr.ReadToEnd();	
			return returndata;
		}
	}
}